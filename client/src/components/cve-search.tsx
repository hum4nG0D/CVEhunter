import { useState, useEffect } from "react";
import { Search, Zap, Trash2 } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { CVEData } from "@/lib/types";

interface CVESearchProps {
  onCVEFound: (cve: CVEData) => void;
  onSearchStart: () => void;
  onSearchEnd: () => void;
}

export default function CVESearch({ onCVEFound, onSearchStart, onSearchEnd }: CVESearchProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const searchMutation = useMutation({
    mutationFn: async (cveId: string) => {
      const response = await apiRequest("GET", `/api/cve/${cveId}`);
      return response.json();
    },
    onSuccess: (data: CVEData) => {
      onCVEFound(data);
      onSearchEnd();
      queryClient.invalidateQueries({ queryKey: ['/api/search-history'] });
      toast({
        title: "CVE Found",
        description: `Successfully retrieved data for ${data.cveId}`,
      });
    },
    onError: (error: any) => {
      onSearchEnd();
      toast({
        title: "Search Failed",
        description: error.message || "Failed to fetch CVE data",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const trimmed = searchQuery.trim().toUpperCase();
    if (!trimmed) return;
    
    if (!trimmed.match(/^CVE-\d{4}-\d+$/)) {
      toast({
        title: "Invalid Format",
        description: "CVE ID must be in format CVE-YYYY-NNNN",
        variant: "destructive",
      });
      return;
    }

    onSearchStart();
    searchMutation.mutate(trimmed);
  };

  const handleClear = () => {
    setSearchQuery("");
  };

  const handleExampleClick = (example: string) => {
    setSearchQuery(example);
    onSearchStart();
    searchMutation.mutate(example);
  };

  // Listen for external search events
  useEffect(() => {
    const handleSearchEvent = (event: CustomEvent) => {
      const cveId = event.detail;
      setSearchQuery(cveId);
      onSearchStart();
      searchMutation.mutate(cveId);
    };

    window.addEventListener('search-cve', handleSearchEvent as EventListener);
    return () => window.removeEventListener('search-cve', handleSearchEvent as EventListener);
  }, [searchMutation, onSearchStart]);

  const quickExamples = ["CVE-2024-0001", "CVE-2023-44487", "CVE-2023-38408"];

  return (
    <section className="mb-8">
      <Card className="cyber-card scan-line">
        <CardContent className="p-6">
          <div className="mb-6">
            <h2 className="text-xl font-bold text-[hsl(var(--cyber-cyan))] mb-2">
              <Search className="w-5 h-5 mr-2 inline" />
              VULNERABILITY SEARCH
            </h2>
            <p className="text-muted-foreground text-sm">Enter CVE ID to retrieve comprehensive vulnerability intelligence</p>
          </div>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="flex flex-col md:flex-row gap-4 items-end">
              <div className="flex-1">
                <label className="block text-sm font-medium text-muted-foreground mb-2">CVE IDENTIFIER</label>
                <Input
                  type="text"
                  placeholder="CVE-YYYY-NNNN (e.g., CVE-2024-1234)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-background border-[hsl(var(--cyber-cyan))] text-foreground placeholder-muted-foreground focus:ring-[hsl(var(--cyber-cyan))] font-mono h-12"
                />
              </div>
              <div className="flex space-x-2">
                <Button 
                  type="submit"
                  disabled={searchMutation.isPending}
                  className="bg-[hsl(var(--cyber-cyan))] text-background hover:bg-[hsl(var(--cyber-cyan))]/80 px-6 h-12"
                >
                  <Zap className="w-4 h-4 mr-2" />
                  SCAN
                </Button>
                <Button 
                  type="button"
                  variant="outline"
                  onClick={handleClear}
                  className="terminal-border hover:bg-muted px-6 h-12"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  CLEAR
                </Button>
              </div>
            </div>
            
            <div className="flex flex-wrap gap-2 text-sm">
              <span className="text-muted-foreground">Quick Examples:</span>
              {quickExamples.map((example) => (
                <button 
                  key={example}
                  type="button" 
                  onClick={() => handleExampleClick(example)}
                  className="text-[hsl(var(--cyber-cyan))] hover:text-[hsl(var(--cyber-cyan))]/80 transition-colors"
                >
                  {example}
                </button>
              ))}
            </div>
          </form>
        </CardContent>
      </Card>
    </section>
  );
}
