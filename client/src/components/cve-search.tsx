/// <reference types="vite/client" />
import { useState, useEffect } from "react";
import { Search, Zap, Trash2, Terminal, Cpu, Wifi, Shield } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { CVEData } from "@/lib/types";

interface CVESearchProps {
  onCVEFound: (cve: CVEData) => void;
  onSearchStart: () => void;
  onSearchEnd: () => void;
}

export default function CVESearch({ onCVEFound, onSearchStart, onSearchEnd }: CVESearchProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [isTerminalActive, setIsTerminalActive] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const searchMutation = useMutation({
    mutationFn: async (cveId: string) => {
      const response = await apiRequest("GET", `/api/cve/${cveId}`);
      return response.json();
    },
    onSuccess: (data: CVEData) => {
      onCVEFound(data);
      onSearchEnd();
      queryClient.invalidateQueries({ queryKey: ['/api/search-history'] });
      toast({
        title: "CVE Found",
        description: `Successfully retrieved data for ${data.cveId}`,
      });
    },
    onError: (error: any) => {
      onSearchEnd();
      toast({
        title: "Search Failed",
        description: error.message || "Failed to fetch CVE data",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const trimmed = searchQuery.trim().toUpperCase();
    if (!trimmed) return;
    
    if (!trimmed.match(/^CVE-\d{4}-\d+$/)) {
      toast({
        title: "Invalid Format",
        description: "CVE ID must be in format CVE-YYYY-NNNN",
        variant: "destructive",
      });
      return;
    }

    onSearchStart();
    searchMutation.mutate(trimmed);
  };

  const handleClear = () => {
    setSearchQuery("");
  };

  const handleExampleClick = (example: string) => {
    setSearchQuery(example);
    onSearchStart();
    searchMutation.mutate(example);
  };

  // Listen for external search events
  useEffect(() => {
    const handleSearchEvent = (event: CustomEvent) => {
      const cveId = event.detail;
      setSearchQuery(cveId);
      onSearchStart();
      searchMutation.mutate(cveId);
    };

    window.addEventListener('search-cve', handleSearchEvent as EventListener);
    return () => window.removeEventListener('search-cve', handleSearchEvent as EventListener);
  }, [searchMutation, onSearchStart]);

  // Terminal activation effect
  useEffect(() => {
    const timer = setTimeout(() => setIsTerminalActive(true), 500);
    return () => clearTimeout(timer);
  }, []);

  return (
    <section className="mb-8">
      <div className="relative">
        {/* Futuristic Terminal Container */}
        <div className="relative bg-gradient-to-br from-black via-gray-900 to-black border-2 border-[hsl(var(--matrix-green))] rounded-lg p-1 shadow-[0_0_30px_rgba(0,255,65,0.4)] overflow-hidden">
          {/* Terminal Header */}
          <div className="bg-gradient-to-r from-[hsl(var(--matrix-green))] to-[hsl(var(--cyber-cyan))] p-3 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Terminal className="w-5 h-5 text-black" />
              <span className="text-black font-mono font-bold text-sm">CVEHUNTER TERMINAL</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
              <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
            </div>
          </div>

          {/* Terminal Content */}
          <div className="p-6 bg-black/90 min-h-[200px]">
            {/* System Status Bar */}
            <div className="flex items-center justify-between mb-4 text-[hsl(var(--matrix-green))] text-xs font-mono">
              <div className="flex items-center space-x-4">
                <span className="flex items-center">
                  <Cpu className="w-3 h-3 mr-1" />
                  CPU: 98%
                </span>
                <span className="flex items-center">
                  <Wifi className="w-3 h-3 mr-1" />
                  NET: ACTIVE
                </span>
                <span className="flex items-center">
                  <Shield className="w-3 h-3 mr-1" />
                  SEC: ENABLED
                </span>
              </div>
              <span>{new Date().toLocaleTimeString()}</span>
            </div>

            {/* Terminal Output */}
            <div className="space-y-2 mb-4 text-[hsl(var(--matrix-green))] text-sm font-mono">
              <div className="typewriter">
                <span className="text-[hsl(var(--cyber-cyan))]">wwwdata@cve-hunter:~$</span> <span className="text-[hsl(var(--matrix-green))]">gcc -pthread dirtyc0w.c -o dirtyc0w && ./dirtyc0w foo m00000000000000000000</span>
              </div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">[i] Dirty COW exploit (CVE-2016-5195) by @firefart</div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">[+] Backing up /usr/bin/passwd to /tmp/bak</div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">[+] Overwriting /usr/bin/passwd... done! Spawning root shell...</div>
              <div className="typewriter">
                <span className="text-[hsl(var(--cyber-cyan))]">root@cve-hunter:/tmp#</span> <span className="text-[hsl(var(--matrix-green))]">whoami && id</span>
              </div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">root; uid=0(root) gid=0(root) groups=0(root)</div>
            </div>

            {/* Search Interface */}
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="flex items-center space-x-2">
                <span className="text-[hsl(var(--cyber-cyan))] font-mono">root@cve-hunter:/tmp#</span>
                <div className="flex-1 relative">
                  <Input
                    type="text"
                    placeholder="Enter CVE ID (e.g., CVE-2024-1234)"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="bg-transparent border-none text-[hsl(var(--matrix-green))] placeholder:text-[hsl(var(--matrix-green))]/50 font-mono text-sm focus:ring-0 focus:outline-none"
                    style={{ caretColor: 'hsl(var(--matrix-green))' }}
                  />
                  <div className="absolute right-2 top-1/2 transform -translate-y-1/2 w-2 h-4 bg-[hsl(var(--matrix-green))] animate-pulse"></div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-3">
                <Button 
                  type="submit"
                  disabled={searchMutation.isPending}
                  className="bg-gradient-to-r from-[hsl(var(--matrix-green))] to-[hsl(var(--cyber-cyan))] text-black font-mono text-sm px-4 py-2 hover:from-[hsl(var(--cyber-cyan))] hover:to-[hsl(var(--matrix-green))] transition-all duration-300 shadow-[0_0_15px_rgba(0,255,65,0.5)]"
                >
                  <Zap className="w-4 h-4 mr-2" />
                  EXECUTE_SCAN
                </Button>
                <Button 
                  type="button"
                  onClick={handleClear}
                  className="bg-transparent border border-[hsl(var(--critical))] text-[hsl(var(--critical))] font-mono text-sm px-4 py-2 hover:bg-[hsl(var(--critical))] hover:text-black transition-all duration-300"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  CLEAR
                </Button>
              </div>
            </form>
          </div>

          {/* Terminal Footer */}
          <div className="bg-gradient-to-r from-[hsl(var(--matrix-green))] to-[hsl(var(--cyber-cyan))] p-2 flex items-center justify-between text-black text-xs font-mono">
            <span>STATUS: {searchMutation.isPending ? 'SCANNING...' : 'READY'}</span>
            <span>cvehunter git:main</span>
          </div>
        </div>

        {/* Floating Elements */}
        <div className="absolute -top-2 -right-2 w-4 h-4 bg-[hsl(var(--critical))] rounded-full animate-ping"></div>
        <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-[hsl(var(--cyber-cyan))] rounded-full animate-pulse"></div>
      </div>
    </section>
  );
}
