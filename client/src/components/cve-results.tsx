import { Shield, ChartLine, Server, AlertTriangle, Newspaper, Globe, Bot, Link } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import LoadingState from "./loading-state";
import ErrorState from "./error-state";
import { CVEData, AffectedProduct, KnownExploit, RelatedNews, ShodanData, ThreatIntelligence, RHELAdvisory } from "@/lib/types";
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import ReactMarkdown from 'react-markdown';

// Fix Leaflet marker icons
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

interface CVEResultsProps {
  cve: CVEData | null;
  isSearching: boolean;
}

export default function CVEResults({ cve, isSearching }: CVEResultsProps) {
  if (isSearching) {
    return (
      <section className="mb-8">
        <LoadingState />
      </section>
    );
  }

  if (!cve) {
    return null;
  }

  console.log('CVE data in component:', JSON.stringify(cve, null, 2));
  console.log('Description type:', typeof cve.description);
  console.log('Description value:', cve.description);

  const getSeverityColor = (severity: string | null) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-[hsl(var(--critical))]';
      case 'high': return 'bg-[hsl(var(--high))]';
      case 'medium': return 'bg-[hsl(var(--medium))]';
      case 'low': return 'bg-[hsl(var(--low))]';
      default: return 'bg-muted';
    }
  };

  const getSeverityTextColor = (severity: string | null) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-[hsl(var(--critical))]';
      case 'high': return 'text-[hsl(var(--high))]';
      case 'medium': return 'text-[hsl(var(--medium))]';
      case 'low': return 'text-[hsl(var(--low))]';
      default: return 'text-muted-foreground';
    }
  };

  // Parse JSON strings into objects
  const affectedProducts = cve.affectedProducts ? JSON.parse(cve.affectedProducts) : [];
  const knownExploits = cve.knownExploits ? JSON.parse(cve.knownExploits) : [];
  const relatedNews = cve.relatedNews ? JSON.parse(cve.relatedNews) : [];
  const references = cve.references ? JSON.parse(cve.references) : [];
  const rhelAdvisory = cve.rhelAdvisory ? JSON.parse(cve.rhelAdvisory) : null;
  const shodanData = cve.shodanData ? JSON.parse(cve.shodanData) : null;
  const threatIntelligence = cve.threatIntelligence ? JSON.parse(cve.threatIntelligence) : null;
  const threatContext = cve.threatContext ? JSON.parse(cve.threatContext) : null;

  // Description is now guaranteed to be a string from the server
  const description = typeof cve.description === 'string' ? cve.description : 'No description available';

  // Log the data for debugging
  console.log('CVE Data:', {
    description: cve.description,
    descriptionType: typeof cve.description,
    affectedProducts,
    knownExploits,
    relatedNews,
    rhelAdvisory,
    shodanData,
    threatIntelligence,
    threatContext
  });

  const shodanMarkers = shodanData?.matches?.filter(m => m.latitude && m.longitude) || [];
  
  console.log('Shodan Data:', shodanData);
  console.log('Shodan Markers:', shodanMarkers);

  // Calculate impact score based on CVSS score and severity
  const calculateImpactScore = (cvssScore: number | null, severity: string | null): number => {
    if (!cvssScore || !severity) return 0;
    
    // Base impact on CVSS score
    let impactScore = 0;
    if (cvssScore >= 9.0) impactScore = 5; // Catastrophic
    else if (cvssScore >= 7.0) impactScore = 4; // Major
    else if (cvssScore >= 4.0) impactScore = 3; // Moderate
    else if (cvssScore >= 2.0) impactScore = 2; // Minor
    else impactScore = 1; // Insignificant

    // Adjust based on severity if available
    if (severity) {
      const severityLower = severity.toLowerCase();
      if (severityLower === 'critical') impactScore = Math.max(impactScore, 5);
      else if (severityLower === 'high') impactScore = Math.max(impactScore, 4);
      else if (severityLower === 'medium') impactScore = Math.max(impactScore, 3);
      else if (severityLower === 'low') impactScore = Math.max(impactScore, 2);
    }

    return impactScore;
  };

  // Calculate likelihood score based on EPSS score and percentile
  const calculateLikelihoodScore = (epssScore: number | null, epssPercentile: number | null): number => {
    if (!epssScore && !epssPercentile) return 0;
    
    let likelihoodScore = 0;
    
    // Use EPSS score if available
    if (epssScore !== null) {
      if (epssScore >= 0.75) likelihoodScore = 5; // Almost Certain
      else if (epssScore >= 0.5) likelihoodScore = 4; // Likely
      else if (epssScore >= 0.25) likelihoodScore = 3; // Possible
      else if (epssScore >= 0.1) likelihoodScore = 2; // Seldom
      else likelihoodScore = 1; // Rare
    }
    
    // Adjust based on EPSS percentile if available
    if (epssPercentile !== null) {
      const percentileScore = Math.ceil(epssPercentile / 20); // Convert percentile to 1-5 scale
      likelihoodScore = Math.max(likelihoodScore, percentileScore);
    }

    // Adjust based on known exploits
    if (knownExploits && knownExploits.length > 0) {
      likelihoodScore = Math.max(likelihoodScore, 4); // At least "Likely" if exploits exist
    }

    return likelihoodScore;
  };

  // Get the risk level based on impact and likelihood scores
  const getRiskLevel = (impactScore: number, likelihoodScore: number): string => {
    // Risk matrix mapping
    const riskMatrix = [
      ['MEDIUM', 'HIGH', 'HIGH', 'CRITICAL', 'CRITICAL'],     // Catastrophic (5)
      ['MEDIUM', 'MEDIUM', 'HIGH', 'HIGH', 'CRITICAL'],         // Major (4)
      ['LOW', 'MEDIUM', 'MEDIUM', 'HIGH', 'HIGH'],       // Moderate (3)
      ['LOW', 'LOW', 'MEDIUM', 'MEDIUM', 'HIGH'],        // Minor (2)
      ['LOW', 'LOW', 'LOW', 'MEDIUM', 'MEDIUM']            // Insignificant (1)
    ];

    // Convert scores to 0-based indices
    // Impact scores are 1-5, where 5 is Catastrophic (first row)
    const impactIndex = 5 - impactScore;
    // Likelihood scores are 1-5, where 5 is Almost Certain (last column)
    const likelihoodIndex = likelihoodScore - 1;

    // Ensure indices are within bounds
    const safeImpactIndex = Math.min(Math.max(impactIndex, 0), 4);
    const safeLikelihoodIndex = Math.min(Math.max(likelihoodIndex, 0), 4);

    return riskMatrix[safeImpactIndex][safeLikelihoodIndex];
  };

  // Calculate scores for this CVE
  const impactScore = calculateImpactScore(cve.cvssScore, cve.severity);
  const likelihoodScore = calculateLikelihoodScore(cve.epssScore, cve.epssPercentile);
  const riskLevel = getRiskLevel(impactScore, likelihoodScore);

  // Function to determine if a cell should be highlighted
  const shouldHighlightCell = (rowIndex: number, colIndex: number): boolean => {
    // Convert 1-based scores to 0-based indices
    // Impact scores are 1-5, where 5 is Catastrophic (first row)
    const impactIndex = 5 - impactScore;
    // Likelihood scores are 1-5, where 5 is Almost Certain (last column)
    const likelihoodIndex = likelihoodScore - 1;

    return impactIndex === rowIndex && likelihoodIndex === colIndex - 1;
  };

  return (
    <section className="mb-8">
      {/* CVE Overview Terminal */}
      <div className="relative mb-6">
        <div className="relative bg-gradient-to-br from-black via-gray-900 to-black border-2 border-[hsl(var(--matrix-green))] rounded-lg p-1 shadow-[0_0_30px_rgba(0,255,65,0.4)] overflow-hidden">
          {/* Terminal Header */}
          <div className="bg-gradient-to-r from-[hsl(var(--matrix-green))] to-[hsl(var(--cyber-cyan))] p-3 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Shield className="w-5 h-5 text-black" />
              <span className="text-black font-mono font-bold text-sm">CVE_ANALYSIS_TERMINAL_v2.0</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
              <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
            </div>
          </div>

          {/* Terminal Content */}
          <div className="p-6 bg-black/90 min-h-[300px]">
            {/* System Status Bar */}
            <div className="flex items-center justify-between mb-4 text-[hsl(var(--matrix-green))] text-xs font-mono">
              <div className="flex items-center space-x-4">
                <span className="flex items-center">
                  <Shield className="w-3 h-3 mr-1" />
                  CVE: {cve.cveId}
                </span>
                <span className="flex items-center">
                  <ChartLine className="w-3 h-3 mr-1" />
                  CVSS: {cve.cvssScore?.toFixed(1) || 'N/A'}
                </span>
                <span className="flex items-center">
                  <AlertTriangle className="w-3 h-3 mr-1" />
                  SEVERITY: {cve.severity || 'N/A'}
                </span>
              </div>
              <span>{new Date().toLocaleTimeString()}</span>
            </div>

            {/* Terminal Output */}
            <div className="space-y-2 mb-4 text-[hsl(var(--matrix-green))] text-sm font-mono">
              <div className="text-[hsl(var(--cyber-cyan))]">root@cve-hunter:~$ ./analyze_cve.sh {cve.cveId}</div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">Initializing CVE analysis...</div>
              <div className="text-[hsl(var(--cyber-cyan))] opacity-80">Loading vulnerability data...</div>
              <div className="text-[hsl(var(--matrix-green))] opacity-80">Analyzing threat intelligence...</div>
              <div className="text-[hsl(var(--cyber-cyan))] opacity-80">CVE analysis complete.</div>
            </div>

            {/* CVE Details */}
            <div className="space-y-4">
              <div className="bg-background/20 p-4 rounded border border-[hsl(var(--matrix-green))]/30">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-[hsl(var(--matrix-green))] mb-2 font-mono">{cve.cveId}</h3>
                    <p className="text-muted-foreground text-sm">{description}</p>
                  </div>
                  <div className="flex items-center space-x-4 ml-4">
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${getSeverityTextColor(cve.severity)} font-mono`}>
                        {cve.cvssScore?.toFixed(1) || 'N/A'}
                      </div>
                      <div className="text-xs text-muted-foreground">CVSS v3.1</div>
                    </div>
                    <div className={`w-12 h-12 rounded-full border-4 ${getSeverityColor(cve.severity)} flex items-center justify-center`}>
                      <span className="text-white font-bold text-xs font-mono">
                        {cve.severity || 'N/A'}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-background/30 p-3 rounded border border-[hsl(var(--matrix-green))]/20">
                    <div className="text-muted-foreground text-xs mb-1">PUBLISHED</div>
                    <div className="text-[hsl(var(--matrix-green))] font-bold text-sm font-mono">
                      {cve.published ? new Date(cve.published).toLocaleString() : 'N/A'}
                    </div>
                  </div>
                  <div className="bg-background/30 p-3 rounded border border-[hsl(var(--cyber-cyan))]/20">
                    <div className="text-muted-foreground text-xs mb-1">MODIFIED</div>
                    <div className="text-[hsl(var(--cyber-cyan))] font-bold text-sm font-mono">
                      {cve.modified ? new Date(cve.modified).toLocaleString() : 'N/A'}
                    </div>
                  </div>
                  <div className="bg-background/30 p-3 rounded border border-muted/20">
                    <div className="text-muted-foreground text-xs mb-1">SOURCE</div>
                    <div className="text-foreground font-bold text-sm font-mono">NVD</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Terminal Footer */}
          <div className="bg-gradient-to-r from-[hsl(var(--matrix-green))] to-[hsl(var(--cyber-cyan))] p-2 flex items-center justify-between text-black text-xs font-mono">
            <span>STATUS: ANALYSIS_COMPLETE</span>
            <span>BUILD: 2025.01.15</span>
          </div>
        </div>

        {/* Floating Elements */}
        <div className="absolute -top-2 -right-2 w-4 h-4 bg-[hsl(var(--critical))] rounded-full animate-ping"></div>
        <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-[hsl(var(--cyber-cyan))] rounded-full animate-pulse"></div>
      </div>

      {/* EPSS Analysis Terminal */}
      {(cve.epssScore !== null && cve.epssPercentile !== null) && (
        <div className="relative mb-6">
          <div className="relative bg-gradient-to-br from-black via-gray-900 to-black border-2 border-[hsl(var(--cyber-cyan))] rounded-lg p-1 shadow-[0_0_30px_rgba(0,255,255,0.4)] overflow-hidden">
            {/* Terminal Header */}
            <div className="bg-gradient-to-r from-[hsl(var(--cyber-cyan))] to-[hsl(var(--high))] p-3 flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <ChartLine className="w-5 h-5 text-black" />
                <span className="text-black font-mono font-bold text-sm">EPSS_ANALYSIS_TERMINAL_v1.0</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
              </div>
            </div>

            {/* Terminal Content */}
            <div className="p-6 bg-black/90">
              {/* System Status Bar */}
              <div className="flex items-center justify-between mb-4 text-[hsl(var(--cyber-cyan))] text-xs font-mono">
                <div className="flex items-center space-x-4">
                  <span className="flex items-center">
                    <ChartLine className="w-3 h-3 mr-1" />
                    EPSS_SCORE: {(cve.epssScore * 100).toFixed(2)}%
                  </span>
                  <span className="flex items-center">
                    <AlertTriangle className="w-3 h-3 mr-1" />
                    PERCENTILE: {(cve.epssPercentile * 100).toFixed(2)}%
                  </span>
                </div>
                <span>Exploit Prediction Scoring System</span>
              </div>

              {/* Terminal Output */}
              <div className="space-y-2 mb-4 text-[hsl(var(--cyber-cyan))] text-sm font-mono">
                <div className="text-[hsl(var(--high))]">root@cve-hunter:~$ ./epss_analyzer.sh {cve.cveId}</div>
                <div className="text-[hsl(var(--cyber-cyan))] opacity-80">Calculating exploit probability...</div>
                <div className="text-[hsl(var(--high))] opacity-80">Analyzing historical data...</div>
                <div className="text-[hsl(var(--cyber-cyan))] opacity-80">EPSS analysis complete.</div>
              </div>

              {/* EPSS Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-background/20 p-4 rounded border border-[hsl(var(--cyber-cyan))]/30">
                  <div className="text-muted-foreground text-xs mb-1">EPSS SCORE</div>
                  <div className="text-2xl font-bold text-[hsl(var(--high))] font-mono">
                    {(cve.epssScore * 100).toFixed(2)}%
                  </div>
                  <div className="text-xs text-muted-foreground">
                    Probability of exploitation
                  </div>
                </div>
                <div className="bg-background/20 p-4 rounded border border-[hsl(var(--critical))]/30">
                  <div className="text-muted-foreground text-xs mb-1">EPSS PERCENTILE</div>
                  <div className="text-2xl font-bold text-[hsl(var(--critical))] font-mono">
                    {(cve.epssPercentile * 100).toFixed(2)}%
                  </div>
                  <div className="text-xs text-muted-foreground">
                    Higher than {(cve.epssPercentile * 100).toFixed(2)}% of all CVEs
                  </div>
                </div>
              </div>
            </div>

            {/* Terminal Footer */}
            <div className="bg-gradient-to-r from-[hsl(var(--cyber-cyan))] to-[hsl(var(--high))] p-2 flex items-center justify-between text-black text-xs font-mono">
              <span>STATUS: EPSS_ANALYSIS_COMPLETE</span>
              <span>BUILD: 2025.01.15</span>
            </div>
          </div>

          {/* Floating Elements */}
          <div className="absolute -top-2 -right-2 w-4 h-4 bg-[hsl(var(--high))] rounded-full animate-ping"></div>
          <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-[hsl(var(--cyber-cyan))] rounded-full animate-pulse"></div>
        </div>
      )}

      {/* CVSS Analysis Terminal */}
      {cve.cvssVector && (
        <div className="relative mb-6">
          <div className="relative bg-gradient-to-br from-black via-gray-900 to-black border-2 border-[hsl(var(--high))] rounded-lg p-1 shadow-[0_0_30px_rgba(255,179,71,0.4)] overflow-hidden">
            {/* Terminal Header */}
            <div className="bg-gradient-to-r from-[hsl(var(--high))] to-[hsl(var(--matrix-green))] p-3 flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Shield className="w-5 h-5 text-black" />
                <span className="text-black font-mono font-bold text-sm">CVSS_ANALYSIS_TERMINAL_v3.1</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
              </div>
            </div>

            {/* Terminal Content */}
            <div className="p-6 bg-black/90">
              {/* System Status Bar */}
              <div className="flex items-center justify-between mb-4 text-[hsl(var(--high))] text-xs font-mono">
                <div className="flex items-center space-x-4">
                  <span className="flex items-center">
                    <Shield className="w-3 h-3 mr-1" />
                    CVSS_VECTOR: {cve.cvssVector}
                  </span>
                </div>
                <span>Common Vulnerability Scoring System v3.1</span>
              </div>

              {/* Terminal Output */}
              <div className="space-y-2 mb-4 text-[hsl(var(--high))] text-sm font-mono">
                <div className="text-[hsl(var(--matrix-green))]">root@cve-hunter:~$ ./cvss_analyzer.sh {cve.cveId}</div>
                <div className="text-[hsl(var(--high))] opacity-80">Parsing CVSS vector...</div>
                <div className="text-[hsl(var(--matrix-green))] opacity-80">Calculating base metrics...</div>
                <div className="text-[hsl(var(--high))] opacity-80">CVSS analysis complete.</div>
              </div>

              {/* CVSS Vector */}
              <div className="bg-background/20 p-4 rounded border border-[hsl(var(--matrix-green))] mb-4">
                <div className="text-muted-foreground text-xs mb-2">CVSS VECTOR</div>
                <div className="font-mono text-sm bg-muted p-3 rounded border border-[hsl(var(--matrix-green))] text-[hsl(var(--matrix-green))]">
                  {cve.cvssVector}
                </div>
              </div>

              {/* CVSS Metrics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div className="bg-background/20 p-3 rounded border border-[hsl(var(--matrix-green))]/30">
                  <span className="text-muted-foreground text-xs">ATTACK VECTOR</span>
                  <div className="text-[hsl(var(--matrix-green))] font-mono mt-1">{cve.attackVector || 'N/A'}</div>
                </div>
                <div className="bg-background/20 p-3 rounded border border-[hsl(var(--cyber-cyan))]/30">
                  <span className="text-muted-foreground text-xs">COMPLEXITY</span>
                  <div className="text-[hsl(var(--cyber-cyan))] font-mono mt-1">{cve.attackComplexity || 'N/A'}</div>
                </div>
                <div className="bg-background/20 p-3 rounded border border-[hsl(var(--high))]/30">
                  <span className="text-muted-foreground text-xs">PRIVILEGES</span>
                  <div className="text-[hsl(var(--high))] font-mono mt-1">{cve.privileges || 'N/A'}</div>
                </div>
                <div className="bg-background/20 p-3 rounded border border-[hsl(var(--critical))]/30">
                  <span className="text-muted-foreground text-xs">USER INTERACTION</span>
                  <div className="text-[hsl(var(--critical))] font-mono mt-1">{cve.userInteraction || 'N/A'}</div>
                </div>
              </div>
            </div>

            {/* Terminal Footer */}
            <div className="bg-gradient-to-r from-[hsl(var(--high))] to-[hsl(var(--matrix-green))] p-2 flex items-center justify-between text-black text-xs font-mono">
              <span>STATUS: CVSS_ANALYSIS_COMPLETE</span>
              <span>BUILD: 2025.01.15</span>
            </div>
          </div>

          {/* Floating Elements */}
          <div className="absolute -top-2 -right-2 w-4 h-4 bg-[hsl(var(--matrix-green))] rounded-full animate-ping"></div>
          <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-[hsl(var(--high))] rounded-full animate-pulse"></div>
        </div>
      )}

      {/* Risk Matrix and References Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Card className="cyber-card">
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <ChartLine className="w-5 h-5 mr-2 text-[hsl(var(--matrix-green))]" />
              <span className="text-[hsl(var(--matrix-green))] font-mono">RISK MATRIX</span>
            </h3>
            <div className="grid grid-cols-6 gap-2 text-sm font-mono">
              {/* Column headers - Likelihood */}
              <div className="col-span-1"></div> {/* Empty cell for alignment */}
              <div className="col-span-5 grid grid-cols-5 gap-2 mb-1">
                <div className="text-[hsl(var(--cyber-cyan))] text-center text-xs px-1">
                  <span className="animate-pulse">RARE</span>
                </div>
                <div className="text-[hsl(var(--cyber-cyan))] text-center text-xs px-1">
                  <span className="animate-pulse">SELDOM</span>
                </div>
                <div className="text-[hsl(var(--cyber-cyan))] text-center text-xs px-1">
                  <span className="animate-pulse">POSSIBLE</span>
                </div>
                <div className="text-[hsl(var(--cyber-cyan))] text-center text-xs px-1">
                  <span className="animate-pulse">LIKELY</span>
                </div>
                <div className="text-[hsl(var(--cyber-cyan))] text-center text-xs px-1">
                  <span className="animate-pulse">ALMOST CERTAIN</span>
                </div>
              </div>
              
              {/* Risk matrix grid */}
              <div className="col-span-6 grid grid-cols-6 gap-2">
                {/* Row 1 - Catastrophic Impact */}
                <div className="text-[hsl(var(--cyber-cyan))] flex items-center justify-end pr-2 text-xs">
                  <span className="animate-pulse whitespace-nowrap">CATASTROPHIC</span>
                </div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(0, 1) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(0, 2) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(0, 3) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>
                <div className={`bg-red-900/20 border border-red-500/50 p-1 rounded text-center text-red-400 shadow-[0_0_10px_rgba(239,68,68,0.3)] hover:shadow-[0_0_15px_rgba(239,68,68,0.5)] transition-all text-xs ${shouldHighlightCell(0, 4) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>CRITICAL</div>
                <div className={`bg-red-900/20 border border-red-500/50 p-1 rounded text-center text-red-400 shadow-[0_0_10px_rgba(239,68,68,0.3)] hover:shadow-[0_0_15px_rgba(239,68,68,0.5)] transition-all text-xs ${shouldHighlightCell(0, 5) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>CRITICAL</div>

                {/* Row 2 - Major Impact */}
                <div className="text-[hsl(var(--cyber-cyan))] flex items-center justify-end pr-2 text-xs">
                  <span className="animate-pulse whitespace-nowrap">MAJOR</span>
                </div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(1, 1) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(1, 2) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(1, 3) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(1, 4) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>
                <div className={`bg-red-900/20 border border-red-500/50 p-1 rounded text-center text-red-400 shadow-[0_0_10px_rgba(239,68,68,0.3)] hover:shadow-[0_0_15px_rgba(239,68,68,0.5)] transition-all text-xs ${shouldHighlightCell(1, 5) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>CRITICAL</div>

                {/* Row 3 - Moderate Impact */}
                <div className="text-[hsl(var(--cyber-cyan))] flex items-center justify-end pr-2 text-xs">
                  <span className="animate-pulse whitespace-nowrap">MODERATE</span>
                </div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(2, 1) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(2, 2) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(2, 3) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(2, 4) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(2, 5) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>

                {/* Row 4 - Minor Impact */}
                <div className="text-[hsl(var(--cyber-cyan))] flex items-center justify-end pr-2 text-xs">
                  <span className="animate-pulse whitespace-nowrap">MINOR</span>
                </div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(3, 1) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(3, 2) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(3, 3) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(3, 4) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-orange-900/20 border border-orange-500/50 p-1 rounded text-center text-orange-400 shadow-[0_0_10px_rgba(249,115,22,0.3)] hover:shadow-[0_0_15px_rgba(249,115,22,0.5)] transition-all text-xs ${shouldHighlightCell(3, 5) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>HIGH</div>

                {/* Row 5 - Insignificant Impact */}
                <div className="text-[hsl(var(--cyber-cyan))] flex items-center justify-end pr-2 text-xs">
                  <span className="animate-pulse whitespace-nowrap">INSIGNIFICANT</span>
                </div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(4, 1) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(4, 2) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-green-900/20 border border-green-500/50 p-1 rounded text-center text-green-400 shadow-[0_0_10px_rgba(34,197,94,0.3)] hover:shadow-[0_0_15px_rgba(34,197,94,0.5)] transition-all text-xs ${shouldHighlightCell(4, 3) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>LOW</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(4, 4) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
                <div className={`bg-yellow-900/20 border border-yellow-500/50 p-1 rounded text-center text-yellow-400 shadow-[0_0_10px_rgba(234,179,8,0.3)] hover:shadow-[0_0_15px_rgba(234,179,8,0.5)] transition-all text-xs ${shouldHighlightCell(4, 5) ? 'ring-2 ring-[hsl(var(--matrix-green))] ring-offset-2' : ''}`}>MEDIUM</div>
              </div>
            </div>

            {/* Risk score explanation */}
            <div className="col-span-6 mt-6 p-4 bg-background/50 border border-[hsl(var(--cyber-cyan))]/20 rounded-lg">
              <div className="flex flex-col md:flex-row items-center justify-center gap-6">
                <div className="text-center">
                  <div className="text-sm text-muted-foreground mb-1">Impact Score</div>
                  <div className="text-2xl font-bold text-[hsl(var(--cyber-cyan))]">
                    {impactScore}
                    <span className="text-sm ml-2 text-muted-foreground">({cve.severity || 'Unknown'})</span>
                  </div>
                </div>
                <div className="hidden md:block text-[hsl(var(--cyber-cyan))] text-2xl">×</div>
                <div className="text-center">
                  <div className="text-sm text-muted-foreground mb-1">Likelihood Score</div>
                  <div className="text-2xl font-bold text-[hsl(var(--cyber-cyan))]">
                    {likelihoodScore}
                    <span className="text-sm ml-2 text-muted-foreground">
                      ({cve.epssScore ? `${(cve.epssScore * 100).toFixed(1)}%` : 'Unknown'})
                    </span>
                  </div>
                </div>
                <div className="hidden md:block text-[hsl(var(--cyber-cyan))] text-2xl">=</div>
                <div className="text-center">
                  <div className="text-sm text-muted-foreground mb-1">Risk Level</div>
                  <div className={`text-2xl font-bold ${
                    riskLevel === 'CRITICAL' ? 'text-[hsl(var(--critical))]' :
                    riskLevel === 'HIGH' ? 'text-[hsl(var(--high))]' :
                    riskLevel === 'MEDIUM' ? 'text-[hsl(var(--medium))]' :
                    'text-[hsl(var(--low))]'
                  }`}>
                    {riskLevel}
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="cyber-card">
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Link className="w-5 h-5 mr-2" />
              References
            </h3>
            <div className="space-y-4 max-h-[500px] overflow-y-auto">
              {references.length > 0 ? (
                references.map((ref: { url: string; tags?: string[]; source?: string }, index: number) => (
                <div key={index} className="bg-background p-4 rounded-lg border border-muted">
                    <div className="space-y-2">
                      <div>
                        <a 
                          href={ref.url} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-[hsl(var(--cyber-cyan))] hover:underline break-all"
                        >
                          {ref.url}
                        </a>
                        {ref.source && (
                          <div className="text-sm text-muted-foreground mt-1">
                            Source: {ref.source}
                          </div>
                        )}
                      </div>
                      {ref.tags && ref.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {ref.tags.map((tag: string, tagIndex: number) => (
                            <Badge key={tagIndex} variant="secondary">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-muted-foreground">No references available</div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Threat Intelligence */}
        <Card className="cyber-card">
          <CardContent className="p-6">
            <h4 className="text-lg font-bold text-[hsl(var(--critical))] mb-4">
              <Shield className="w-5 h-5 mr-2 inline" />
              THREAT INTELLIGENCE
            </h4>
            {threatIntelligence ? (
              <div className="space-y-4 max-h-[500px] overflow-y-auto pr-2">
                {/* Threat Level */}
                <div className="bg-background p-4 rounded-lg border border-[hsl(var(--critical))]/30">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-muted-foreground">Threat Level:</span>
                    <Badge className={`${
                      threatIntelligence.threatLevel?.toLowerCase() === 'critical' ? 'bg-[hsl(var(--critical))]' :
                      threatIntelligence.threatLevel?.toLowerCase() === 'high' ? 'bg-[hsl(var(--high))]' :
                      threatIntelligence.threatLevel?.toLowerCase() === 'medium' ? 'bg-[hsl(var(--medium))]' :
                      'bg-[hsl(var(--low))]'
                    } text-white`}>
                      {threatIntelligence.threatLevel || 'Unknown'}
                    </Badge>
                  </div>
                </div>

                {/* Attack Vectors */}
                {threatIntelligence.attackVectors?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-muted">
                    <h5 className="font-bold text-[hsl(var(--critical))] mb-2">Attack Vectors</h5>
                    <div className="space-y-2">
                      {threatIntelligence.attackVectors.map((vector: any, index: number) => (
                        <div key={index} className="text-sm">
                          <div className="font-bold">{vector.type}</div>
                          <div className="text-muted-foreground">{vector.description}</div>
                          <div className="text-xs text-muted-foreground mt-1">Risk: {vector.risk}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Mitigations */}
                {threatIntelligence.mitigations?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--matrix-green))]/30">
                    <h5 className="font-bold text-[hsl(var(--matrix-green))] mb-2">Mitigation Strategies</h5>
                    <div className="space-y-2">
                      {threatIntelligence.mitigations.map((mitigation: any, index: number) => (
                        <div key={index} className="text-sm">
                          <div className="font-bold">{mitigation.strategy}</div>
                          <div className="text-muted-foreground">{mitigation.implementation}</div>
                          <div className="text-xs text-muted-foreground mt-1">Effectiveness: {mitigation.effectiveness}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recommendations */}
                {threatIntelligence.recommendations?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--cyber-cyan))]/30">
                    <h5 className="font-bold text-[hsl(var(--cyber-cyan))] mb-2">Recommendations</h5>
                    <div className="space-y-2">
                      {threatIntelligence.recommendations.map((rec: any, index: number) => (
                        <div key={index} className="text-sm">
                          <div className="font-bold">{rec.action}</div>
                          <div className="text-muted-foreground">{rec.rationale}</div>
                          <div className="text-xs text-muted-foreground mt-1">Priority: {rec.priority}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-muted-foreground">No threat intelligence data available</div>
            )}
          </CardContent>
        </Card>

        {/* Threat Context */}
        <Card className="cyber-card">
          <CardContent className="p-6">
            <h4 className="text-lg font-bold text-[hsl(var(--cyber-cyan))] mb-4">
              <ChartLine className="w-5 h-5 mr-2 inline" />
              THREAT CONTEXT
            </h4>
            {threatContext ? (
              <div className="space-y-4 max-h-[500px] overflow-y-auto pr-2">
                {/* Affected Products */}
                {threatContext.industryImpact?.sectors?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--cyber-cyan))]/30">
                    <div className="flex items-center justify-between mb-3">
                      <h5 className="font-bold text-[hsl(var(--cyber-cyan))]">Affected Products</h5>
                      <Badge className="bg-[hsl(var(--cyber-cyan))] text-white">
                        {threatContext.industryImpact.sectors.length} {threatContext.industryImpact.sectors.length === 1 ? 'Product' : 'Products'}
                      </Badge>
                    </div>
                    <div className="space-y-2">
                      {threatContext.industryImpact.sectors.map((sector: string, index: number) => (
                        <div key={index} className="text-sm border-l-4 border-[hsl(var(--cyber-cyan))] pl-3 py-1">
                          <div className="text-muted-foreground break-words">{sector}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Active Threats */}
                {threatContext.activeThreats?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--critical))]/30">
                    <div className="flex items-center justify-between mb-3">
                      <h5 className="font-bold text-[hsl(var(--critical))]">Active Threats</h5>
                      <Badge className="bg-[hsl(var(--critical))] text-white">
                        {threatContext.activeThreats.length} {threatContext.activeThreats.length === 1 ? 'Threat' : 'Threats'}
                      </Badge>
                    </div>
                    <div className="space-y-3">
                      {threatContext.activeThreats.map((threat: any, index: number) => (
                        <div key={index} className="border-l-4 border-[hsl(var(--critical))] pl-3 py-2">
                          <div className="flex items-center justify-between mb-1">
                            <span className="font-semibold text-[hsl(var(--critical))]">{threat.type}</span>
                            <Badge variant="outline" className="text-xs">
                              {threat.confidence} Confidence
                            </Badge>
                          </div>
                          <div className="text-sm text-muted-foreground mb-2">{threat.description}</div>
                          {threat.source && (
                            <a 
                              href={threat.source} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-xs text-[hsl(var(--cyber-cyan))] hover:underline break-all"
                            >
                              View Source →
                            </a>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Related News */}
                {threatContext.news?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--cyber-cyan))]/30">
                    <div className="flex items-center justify-between mb-3">
                      <h5 className="font-bold text-[hsl(var(--cyber-cyan))]">Related News</h5>
                      <Badge className="bg-[hsl(var(--cyber-cyan))] text-white">
                        {threatContext.news.filter((news: any) => news.title !== 'Invalid data').length} {threatContext.news.filter((news: any) => news.title !== 'Invalid data').length === 1 ? 'Article' : 'Articles'}
                      </Badge>
                    </div>
                    <div className="space-y-3">
                      {threatContext.news
                        .filter((news: any) => news.title !== 'Invalid data')
                        .map((news: any, index: number) => (
                          <div key={index} className="border-l-4 border-[hsl(var(--cyber-cyan))] pl-3 py-2">
                            <div className="font-semibold text-[hsl(var(--cyber-cyan))] mb-1">{news.title}</div>
                            <div className="text-sm text-muted-foreground mb-2">{news.description}</div>
                            {news.url && (
                              <a 
                                href={news.url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-xs text-[hsl(var(--cyber-cyan))] hover:underline break-all"
                              >
                                Read more →
                              </a>
                            )}
                          </div>
                        ))}
                    </div>
                  </div>
                )}

                {/* Emerging Trends */}
                {threatContext.emergingTrends?.length > 0 && (
                  <div className="bg-background p-4 rounded-lg border border-[hsl(var(--matrix-green))]/30">
                    <div className="flex items-center justify-between mb-3">
                      <h5 className="font-bold text-[hsl(var(--matrix-green))]">Emerging Trends</h5>
                      <Badge className="bg-[hsl(var(--matrix-green))] text-white">
                        {threatContext.emergingTrends.length} {threatContext.emergingTrends.length === 1 ? 'Trend' : 'Trends'}
                      </Badge>
                    </div>
                    <div className="space-y-3">
                      {threatContext.emergingTrends.map((trend: any, index: number) => (
                        <div key={index} className="border-l-4 border-[hsl(var(--matrix-green))] pl-3 py-2">
                          <div className="flex items-center justify-between mb-1">
                            <span className="font-semibold text-[hsl(var(--matrix-green))]">
                              <span className="font-mono text-xs mr-1">{trend.cweId || 'CWE-Unknown'}:</span>
                              {trend.title || trend.trend || trend.type}
                            </span>
                            <Badge variant="outline" className="text-xs">
                              {trend.severity || 'Unknown'} Severity
                            </Badge>
                          </div>
                          {trend.description && trend.description !== trend.title && (
                            <div className="text-sm text-muted-foreground mb-2">{trend.description}</div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-muted-foreground">No threat context data available</div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Known Exploits and AI Analysis Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Known Exploits */}
        <Card className="cyber-card">
          <CardContent className="p-6">
            <h4 className="text-lg font-bold text-[hsl(var(--critical))] mb-4">
              <AlertTriangle className="w-5 h-5 mr-2 inline" />
              KNOWN EXPLOITS
            </h4>
              {knownExploits.length > 0 ? (
              <div className="space-y-4 max-h-[500px] overflow-y-auto pr-2">
                {knownExploits.map((exploit: KnownExploit, idx: number) => (
                  <div key={idx} className="bg-background p-4 rounded-lg border border-[hsl(var(--critical))]/30">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1 min-w-0">
                        <a 
                          href={exploit.source} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="font-mono text-[hsl(var(--critical))] hover:underline break-all text-sm"
                        >
                          {exploit.source}
                        </a>
                      </div>
                      <Badge className="bg-[hsl(var(--critical))] text-white ml-2 flex-shrink-0">
                        {exploit.type}
                      </Badge>
                  </div>
                    {exploit.description && (
                      <div className="text-sm text-muted-foreground break-words">
                        {exploit.description}
                </div>
              )}
            </div>
                ))}
              </div>
            ) : (
              <div className="text-muted-foreground">No known exploits data available</div>
            )}
          </CardContent>
        </Card>

        {/* AI Analysis */}
        <Card className="cyber-card">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-3">
              <h4 className="text-lg font-bold text-[hsl(var(--cyber-cyan))]">
                <Bot className="w-5 h-5 mr-2 inline" />
                AI-ENHANCED ANALYSIS
            </h4>
            </div>
            {threatIntelligence?.aiAnalysis ? (
              <div className="prose prose-invert max-w-none max-h-[500px] overflow-y-auto">
                <ReactMarkdown>
                  {threatIntelligence.aiAnalysis.openai}
                </ReactMarkdown>
              </div>
            ) : (
              <div className="text-muted-foreground">No AI analysis available</div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Shodan Data */}
      <Card className="cyber-card">
          <CardContent className="p-6">
          <h4 className="text-lg font-bold text-[hsl(var(--high))] mb-4">
            <Globe className="w-5 h-5 mr-2 inline" />
            SHODAN THREAT INTELLIGENCE
            </h4>
          {shodanData ? (
            <div className="space-y-4 max-h-[1000px] overflow-y-auto pr-2">
              {/* CVE Database Information */}
              {shodanData.cveData && (
                <div className="bg-background p-4 rounded-lg border border-[hsl(var(--high))]/30">
                  <h5 className="font-bold text-[hsl(var(--high))] mb-2">CVE Database Information</h5>
                  <div className="space-y-4">
                    {/* Summary */}
                    {shodanData.cveData.summary && (
                      <div className="text-sm">
                        <span className="text-muted-foreground">Summary:</span>
                        <div className="mt-1 text-muted-foreground">{shodanData.cveData.summary}</div>
                      </div>
                    )}

                    {/* CVSS Scores */}
                    <div className="grid grid-cols-2 gap-4">
                      {shodanData.cveData.cvss && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">CVSS Score:</span>
                          <div className="mt-1 font-mono text-[hsl(var(--high))]">{shodanData.cveData.cvss}</div>
                        </div>
                      )}
                      {shodanData.cveData.cvss_version && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">CVSS Version:</span>
                          <div className="mt-1 font-mono">{shodanData.cveData.cvss_version}</div>
                  </div>
                      )}
                      {shodanData.cveData.cvss_v2 && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">CVSS v2:</span>
                          <div className="mt-1 font-mono">{shodanData.cveData.cvss_v2}</div>
                  </div>
                      )}
                      {shodanData.cveData.cvss_v3 && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">CVSS v3:</span>
                          <div className="mt-1 font-mono">{shodanData.cveData.cvss_v3}</div>
                </div>
                      )}
              </div>

                    {/* EPSS Scores */}
                    <div className="grid grid-cols-2 gap-4">
                      {shodanData.cveData.epss && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">EPSS Score:</span>
                          <div className="mt-1 font-mono text-[hsl(var(--high))]">
                            {(shodanData.cveData.epss * 100).toFixed(2)}%
                </div>
              </div>
                      )}
                      {shodanData.cveData.ranking_epss && (
                        <div className="text-sm">
                          <span className="text-muted-foreground">EPSS Percentile:</span>
                          <div className="mt-1 font-mono">
                            {(shodanData.cveData.ranking_epss * 100).toFixed(2)}%
                </div>
                        </div>
                      )}
                    </div>

                    {/* Status Flags */}
                    <div className="flex flex-wrap gap-2">
                      {shodanData.cveData.kev && (
                        <Badge className="bg-[hsl(var(--critical))] text-white">
                          Known Exploited
                        </Badge>
                      )}
                      {shodanData.cveData.ransomware_campaign && (
                        <Badge className="bg-[hsl(var(--critical))] text-white">
                          Ransomware Campaign
                        </Badge>
                      )}
              </div>

                    {/* CPEs */}
                    {shodanData.cveData.cpes && shodanData.cveData.cpes.length > 0 && (
                      <div className="text-sm">
                        <span className="text-muted-foreground">Affected Products:</span>
                        <div className="mt-1 flex flex-wrap gap-2">
                          {shodanData.cveData.cpes.map((cpe: string, idx: number) => (
                            <Badge key={idx} className="bg-[hsl(var(--high))] text-white">
                              {cpe}
                            </Badge>
                          ))}
                </div>
              </div>
                    )}

                    {/* References */}
                    {shodanData.cveData.references && shodanData.cveData.references.length > 0 && (
                      <div className="text-sm">
                        <span className="text-muted-foreground">References:</span>
                        <div className="mt-1 space-y-1">
                          {shodanData.cveData.references.map((ref: string, idx: number) => (
                            <a
                              key={idx}
                              href={ref}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="block text-[hsl(var(--cyber-cyan))] hover:underline text-xs truncate"
                            >
                              {ref}
                            </a>
                          ))}
              </div>
            </div>
      )}

                    {/* Published Time */}
                    {shodanData.cveData.published_time && (
                      <div className="text-sm">
                        <span className="text-muted-foreground">Published:</span>
                        <div className="mt-1">
                          {new Date(shodanData.cveData.published_time).toLocaleString()}
                </div>
              </div>
                    )}
                  </div>
                </div>
      )}
            </div>
          ) : (
            <div className="text-muted-foreground">No Shodan data available</div>
          )}
          </CardContent>
        </Card>
    </section>
  );
}

